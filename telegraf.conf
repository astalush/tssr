[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = ""
  omit_hostname = false

#[[outputs.influxdb_v2]]
#  urls = ["http://192.168.0.10:8086"]
#  token = "alabalaportocala69"
#  organization = "atfinch"
#  bucket = "bucket"
[[outputs.influxdb]]
  urls = ["http://192.168.0.10:8086"]
#  database = "plexlocal"
  database = "debiantelegraf"
  username = "finch"
  password = "nokia3510"

[[inputs.snmp]]
  # List of APs to poll
  agents = [ "Unify-C4-Pro", "Unify-C4-Pro-ETG" ]
  # Polling interval
  interval = "60s"
  # Timeout for each SNMP query.
  timeout = "10s"
  # Number of retries to attempt within timeout.
  retries = 3
  # SNMP version
  version = 2
  # SNMP community string.
  community = "public"
  # Measurement name
  name = "snmp.UAP"
  ##
  ## System Details
  ##
  #  System name (hostname)
  [[inputs.snmp.field]]
    is_tag = true
    name = "sysName"
    oid = "RFC1213-MIB::sysName.0"
  #  System vendor OID
  [[inputs.snmp.field]]
    name = "sysObjectID"
    oid = "RFC1213-MIB::sysObjectID.0"
  #  System description
  [[inputs.snmp.field]]
    name = "sysDescr"
    oid = "RFC1213-MIB::sysDescr.0"
  #  System contact
  [[inputs.snmp.field]]
    name = "sysContact"
    oid = "RFC1213-MIB::sysContact.0"
  #  System location
  [[inputs.snmp.field]]
    name = "sysLocation"
    oid = "RFC1213-MIB::sysLocation.0"
  #  System uptime
  [[inputs.snmp.field]]
    name = "sysUpTime"
    oid = "RFC1213-MIB::sysUpTime.0"
  #  UAP model
  [[inputs.snmp.field]]
    name = "unifiApSystemModel"
    oid = "UBNT-UniFi-MIB::unifiApSystemModel.0"
  #  UAP firmware version
  [[inputs.snmp.field]]
    name = "unifiApSystemVersion"
    oid = "UBNT-UniFi-MIB::unifiApSystemVersion.0"
  #  Per-interface traffic, errors, drops
  [[inputs.snmp.table]]
    oid = "IF-MIB::ifTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "IF-MIB::ifDescr"
  ##
  ## Interface Details & Metrics
  ##
  #  Wireless interfaces
  [[inputs.snmp.table]]
    oid = "UBNT-UniFi-MIB::unifiRadioTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiRadioName"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiRadioRadio"
  #  BSS instances
  [[inputs.snmp.table]]
    oid = "UBNT-UniFi-MIB::unifiVapTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiVapName"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiVapRadio"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiVapEssId"
  #  Ethernet interfaces
  [[inputs.snmp.table]]
    oid = "UBNT-UniFi-MIB::unifiIfTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiIfName"
  ##
  ## SNMP metrics
  ##
  #  Number of SNMP messages received
  [[inputs.snmp.field]]
    name = "snmpInPkts"
    oid = "RFC1213-MIB::snmpInPkts.0"
  #  Number of SNMP Get-Request received
  [[inputs.snmp.field]]
    name = "snmpInGetRequests"
    oid = "RFC1213-MIB::snmpInGetRequests.0"
  #  Number of SNMP Get-Next received
  [[inputs.snmp.field]]
    name = "snmpInGetNexts"
    oid = "RFC1213-MIB::snmpInGetNexts.0"
  #  Number of SNMP objects requested
  [[inputs.snmp.field]]
    name = "snmpInTotalReqVars"
    oid = "RFC1213-MIB::snmpInTotalReqVars.0"
  #  Number of SNMP Get-Response received
  [[inputs.snmp.field]]
    name = "snmpInGetResponses"
    oid = "RFC1213-MIB::snmpInGetResponses.0"
  #  Number of SNMP messages sent
  [[inputs.snmp.field]]
    name = "snmpOutPkts"
    oid = "RFC1213-MIB::snmpOutPkts.0"
  #  Number of SNMP Get-Request sent
  [[inputs.snmp.field]]
    name = "snmpOutGetRequests"
    oid = "RFC1213-MIB::snmpOutGetRequests.0"
  #  Number of SNMP Get-Next sent
  [[inputs.snmp.field]]
    name = "snmpOutGetNexts"
    oid = "RFC1213-MIB::snmpOutGetNexts.0"
  #  Number of SNMP Get-Response sent
  [[inputs.snmp.field]]
    name = "snmpOutGetResponses"
    oid = "RFC1213-MIB::snmpOutGetResponses.0"
  #  Processor listing
  [[inputs.snmp.table]]
    index_as_tag = true
    oid = "HOST-RESOURCES-MIB::hrProcessorTable"
  ##
  ## Host performance metrics
  ##
  #  System Load Average
  [[inputs.snmp.table]]
    oid = "UCD-SNMP-MIB::laTable"
    [[inputs.snmp.table.field]]
      oid = "UCD-SNMP-MIB::laNames"
      is_tag = true
  ##
  ## System Memory (physical/virtual)
  ##
  #  Size of swap sapce configured
  [[inputs.snmp.field]]
    name = "memTotalSwap"
    oid = "UCD-SNMP-MIB::memTotalSwap.0"
  #  Size of swap sapce unused/avail
  [[inputs.snmp.field]]
    name = "memAvailSwap"
    oid = "UCD-SNMP-MIB::memAvailSwap.0"
  #  Size of real/phys mem installed
  [[inputs.snmp.field]]
    name = "memTotalReal"
    oid = "UCD-SNMP-MIB::memTotalReal.0"
  #  Size of real/phys mem unused/avail
  [[inputs.snmp.field]]
    name = "memAvailReal"
    oid = "UCD-SNMP-MIB::memAvailReal.0"
  #  Total amount of mem unused/avail
  [[inputs.snmp.field]]
    name = "memTotalFree"
    oid = "UCD-SNMP-MIB::memTotalFree.0"
  #  Size of mem used as shared memory
  [[inputs.snmp.field]]
    name = "memShared"
    oid = "UCD-SNMP-MIB::memShared.0"
  #  Size of mem used for buffers
  [[inputs.snmp.field]]
    name = "memBuffer"
    oid = "UCD-SNMP-MIB::memBuffer.0"
  #  Size of mem used for cache
  [[inputs.snmp.field]]
    name = "memCached"
    oid = "UCD-SNMP-MIB::memCached.0"
  ##
  ##
  ##
  [inputs.snmp.tags]
    influxdb_database = "debiantelegraf"  

[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

[[inputs.apcupsd]]
  # A list of running apcupsd server to connect to.
  # If not provided will default to tcp://127.0.0.1:3551
  servers = ["tcp://192.168.0.10:3551"]

  ## Timeout for dialing server.
  timeout = "5s"

[[inputs.ethtool]]
  ## List of interfaces to pull metrics for
  interface_include = ["enp4s0"]

[[inputs.kernel_vmstat]]

[[inputs.netstat]]

[[inputs.smart]]
 path_smartctl = "/usr/sbin/smartctl"
 path_nvme = "/usr/sbin/nvme"
 use_sudo = true
 attributes = true
 devices = [
   "/dev/sda -d scsi",
   "/dev/sdb -d scsi",
   "/dev/sdc -d scsi",
   "/dev/sdd -d scsi",
   "/dev/sde -d scsi",
   "/dev/sdf -d scsi",
   "/dev/sdg -d scsi",
   "/dev/sdh -d scsi",
   "/dev/nvme0n1 -d nvme",
   "/dev/nvme1n1 -d nvme"]
[[inputs.sensors]]

[[inputs.net]]
#   ## By default, telegraf gathers stats from any up interface (excluding loopback)
#   ## Setting interfaces will tell it to gather these explicit interfaces,
#   ## regardless of status.
#   ##
#   # interfaces = ["eth0"]
#   ##
#   ## On linux systems telegraf also collects protocol stats.
#   ## Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
#   ##
#   # ignore_protocol_stats = false
#   ##

[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  mount_points = ["/", "/mnt/media", "/mnt/local"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

#[[inputs.exec]]
#    commands = ["bash /home/astalush/nvmehealth.sh",]
#    interval = "60s"
#    timeout = '5s'
#    data_format = "influx"

#[[inputs.exec]]
#    commands = ["bash /home/astalush/scripts/powerhours.sh",]
#    interval = "60s"
#    timeout = '5s'
#    data_format = "influx"

#[[inputs.exec]]
#    commands = ["bash /home/astalush/abc.sh",]
#    timeout = '6s'
#    data_format = "influx"

[[inputs.kernel]]
  # no configuration

[[inputs.mem]]
  # no configuration


[[inputs.processes]]
  # no configuration


[[inputs.swap]]
  # no configuration


[[inputs.system]]
  # no configuration

[[inputs.docker]]
 endpoint = "unix:///var/run/docker.sock"
 gather_services = false
 container_names = []
 source_tag = false
 container_name_include = []
 container_state_include = []
 perdevice = true
 total = false

#[[inputs.docker]]
#   endpoint = "unix:///var/run/docker.sock"
#   use_sudo = true

[[inputs.hddtemp]]

[[inputs.zfs]]

[[inputs.temp]]
